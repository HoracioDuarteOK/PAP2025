/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pap2025;

import pap2025.logica.ControladorFachada;
import pap2025.interfaz.IControladorFachada;
import pap2025.presentacion.VentanaPrincipal;
import pap2025.logica.Lector;
import pap2025.logica.Bibliotecario;
import pap2025.logica.Libro;
import pap2025.logica.ArtEspeciales;
import pap2025.logica.EstadoL;
import pap2025.logica.EstadoP;
import pap2025.logica.Material;
import pap2025.datatypes.DTFecha;
import pap2025.datatypes.DTDimensiones;
import pap2025.persistencia.ConfiguracionBD;
import javax.swing.SwingUtilities;
import java.util.List;

public class App {
    
    public static void main(String[] args) {
        System.out.println("üöÄ Iniciando Sistema de Biblioteca...");
        
        // Inicializar conexi√≥n a la base de datos
        if (!ConfiguracionBD.inicializarConexion()) {
            System.err.println("‚ùå No se pudo conectar a la base de datos. Verifica la configuraci√≥n.");
            System.exit(1);
        }
        
        // Crear instancia del controlador fachada
        IControladorFachada controlador = ControladorFachada.getInstancia();
        
        // Crear datos de prueba
        crearDatosPrueba(controlador);
        
        // Lanzar la ventana principal en el EDT (Event Dispatch Thread)
        SwingUtilities.invokeLater(() -> {
            try {
                new VentanaPrincipal();
                System.out.println("‚úÖ Ventana Principal abierta correctamente");
            } catch (Exception e) {
                System.err.println("‚ùå Error al abrir la ventana principal: " + e.getMessage());
                e.printStackTrace();
            }
        });
        
        // Agregar shutdown hook para cerrar la conexi√≥n
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            ConfiguracionBD.cerrarConexion();
        }));
    }
    
    private static void crearDatosPrueba(IControladorFachada controlador) {
        System.out.println("üìö Creando datos de prueba...");
        
        try {
            // Crear fechas de prueba
            DTFecha fechaHoy = new DTFecha(15, 1, 2025);
            DTFecha fechaAyer = new DTFecha(14, 1, 2025);
            
            // Crear lectores
            controlador.registrarLector("Juan P√©rez", "juan@email.com", "Av. 18 de Julio 123", fechaHoy, pap2025.logica.Zona.BIBLOTECA_CENTRAL);
            controlador.registrarLector("Mar√≠a Garc√≠a", "maria@email.com", "Bv. Artigas 456", fechaHoy, pap2025.logica.Zona.BIBLOTECA_CENTRAL);
            controlador.registrarLector("Carlos L√≥pez", "carlos@email.com", "Ruta 8 km 25", fechaAyer, pap2025.logica.Zona.SUCURSAL_ESTE);
            
            // Crear bibliotecarios
            controlador.registrarBibliotecario("Ana Silva", "ana@biblioteca.com", 1001);
            controlador.registrarBibliotecario("Roberto Torres", "roberto@biblioteca.com", 1002);
            
            // Crear libros
            controlador.crearLibro(fechaHoy, "El Quijote", 863);
            controlador.crearLibro(fechaHoy, "Cien A√±os de Soledad", 471);
            controlador.crearLibro(fechaAyer, "Don Juan Tenorio", 156);
            
            // Crear art√≠culos especiales
            DTDimensiones dim1 = new DTDimensiones(30.0, 20.0, 5.0);
            DTDimensiones dim2 = new DTDimensiones(50.0, 30.0, 10.0);
            controlador.crearArtEspecial(fechaHoy, "Mapa antiguo de Montevideo", 0.5, dim1);
            controlador.crearArtEspecial(fechaAyer, "Globo terr√°queo vintage", 2.0, dim2);
            
            // Crear pr√©stamos de prueba con diferentes estados
            System.out.println("üìã Creando pr√©stamos de prueba...");
            
            // Obtener materiales y usuarios para crear pr√©stamos
            List<Material> materiales = controlador.getListaMateriales();
            List<Lector> lectores = controlador.getListaLectores();
            List<Bibliotecario> bibliotecarios = controlador.getListaBibliotecarios();
            
            if (!materiales.isEmpty() && !lectores.isEmpty() && !bibliotecarios.isEmpty()) {
                // Crear fechas para pr√©stamos
                DTFecha fechaSolicitud = new DTFecha(31, 8, 2025);
                DTFecha fechaDevolucion = new DTFecha(15, 9, 2025);
                DTFecha fechaDevolucionPendiente = new DTFecha(30, 9, 2025);
                
                // Pr√©stamo 1: EN CURSO
                Material material1 = materiales.get(0); // El Quijote
                Lector lector1 = lectores.get(0); // Juan P√©rez
                Bibliotecario bibliotecario1 = bibliotecarios.get(0); // Ana Silva
                Integer prestamo1Id = controlador.crearPrestamo(material1, lector1, bibliotecario1, fechaDevolucion);
                if (prestamo1Id != null) {
                    controlador.actualizarEstadoPrestamo(prestamo1Id, EstadoP.ENCURSO);
                    System.out.println("‚úÖ Pr√©stamo EN CURSO creado: " + material1 + " ‚Üí " + lector1.getNombre());
                }
                
                // Pr√©stamo 2: PENDIENTE (mismo material que el anterior)
                if (materiales.size() > 1) {
                    Material material2 = materiales.get(1); // Cien A√±os de Soledad
                    Lector lector2 = lectores.get(1); // Mar√≠a Garc√≠a
                    Integer prestamo2Id = controlador.crearPrestamo(material2, lector2, bibliotecario1, fechaDevolucionPendiente);
                    if (prestamo2Id != null) {
                        controlador.actualizarEstadoPrestamo(prestamo2Id, EstadoP.PENDIENTE);
                        System.out.println("‚è≥ Pr√©stamo PENDIENTE creado: " + material2 + " ‚Üí " + lector2.getNombre());
                    }
                }
                
                // Pr√©stamo 3: PENDIENTE (art√≠culo especial)
                if (materiales.size() > 3) {
                    Material material3 = materiales.get(3); // Mapa antiguo de Montevideo
                    Lector lector3 = lectores.get(2); // Carlos L√≥pez
                    Integer prestamo3Id = controlador.crearPrestamo(material3, lector3, bibliotecario1, fechaDevolucionPendiente);
                    if (prestamo3Id != null) {
                        controlador.actualizarEstadoPrestamo(prestamo3Id, EstadoP.PENDIENTE);
                        System.out.println("‚è≥ Pr√©stamo PENDIENTE creado: " + material3 + " ‚Üí " + lector3.getNombre());
                    }
                }
                
                // Pr√©stamo 4: PENDIENTE (mismo material que el anterior para ver priorizaci√≥n)
                if (materiales.size() > 3) {
                    Material material4 = materiales.get(3); // Mapa antiguo de Montevideo (otra vez)
                    Lector lector4 = lectores.get(0); // Juan P√©rez
                    Integer prestamo4Id = controlador.crearPrestamo(material4, lector4, bibliotecario1, fechaDevolucionPendiente);
                    if (prestamo4Id != null) {
                        controlador.actualizarEstadoPrestamo(prestamo4Id, EstadoP.PENDIENTE);
                        System.out.println("‚è≥ Pr√©stamo PENDIENTE creado: " + material4 + " ‚Üí " + lector4.getNombre());
                    }
                }
                
                // Pr√©stamo 5: PENDIENTE (art√≠culo especial diferente)
                if (materiales.size() > 4) {
                    Material material5 = materiales.get(4); // Globo terr√°queo vintage
                    Lector lector5 = lectores.get(1); // Mar√≠a Garc√≠a
                    Integer prestamo5Id = controlador.crearPrestamo(material5, lector5, bibliotecarios.get(1), fechaDevolucionPendiente);
                    if (prestamo5Id != null) {
                        controlador.actualizarEstadoPrestamo(prestamo5Id, EstadoP.PENDIENTE);
                        System.out.println("‚è≥ Pr√©stamo PENDIENTE creado: " + material5 + " ‚Üí " + lector5.getNombre());
                    }
                }
                
                // Pr√©stamo 6: DEVUELTO (para completar la variedad)
                if (materiales.size() > 2) {
                    Material material6 = materiales.get(2); // Don Juan Tenorio
                    Lector lector6 = lectores.get(2); // Carlos L√≥pez
                    Integer prestamo6Id = controlador.crearPrestamo(material6, lector6, bibliotecarios.get(1), fechaDevolucion);
                    if (prestamo6Id != null) {
                        controlador.actualizarEstadoPrestamo(prestamo6Id, EstadoP.DEVUELTO);
                        System.out.println("‚úÖ Pr√©stamo DEVUELTO creado: " + material6 + " ‚Üí " + lector6.getNombre());
                    }
                }
            }
            
            System.out.println("‚úÖ Datos de prueba creados exitosamente");
            System.out.println("   üìö Libros: " + controlador.obtenerCantidadLibros());
            System.out.println("   üé® Art√≠culos especiales: " + controlador.obtenerCantidadArtEspeciales());
            System.out.println("   üë§ Lectores: " + controlador.obtenerCantidadLectores());
            System.out.println("   üè¢ Bibliotecarios: " + controlador.obtenerCantidadBibliotecarios());
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error al crear datos de prueba: " + e.getMessage());
        }
    }
}
